AMBuild is the build system AlliedMods uses to compile AMXModX, MetaMod: Source, and SourceMod.

Prerequisites:

1. Python 2.6 or newer.
2. Mercurial client.

Installing AMBuild:
1. Use Mercurial to clone the AMBuild repository: https://hg.alliedmods.net/ambuild/
2. Run python setup.py build
3. Run python setup.py install.  This requires administrative permissions on most OSes.

To configure your project to use AMBuild2, it helps if you have experience editing the Makefile for compiling Linux extensions by hand.

The following environment variables are used by AMBuild2 -

All OSes:
MMSOURCE110 - Path to MetaMod: Source
SOURCEMOD15 - Path to SourceMod 
HL2SDK - Path to Original SDK
HL2SDKCSGO - Path to Counter-Strike: Global Offensive SDK
HL2SDKCSS - Path to Counter-Strike: Source SDK
HL2SDKDODS - Path to Day of Defeat: Source SDK
HL2SDKHL2DM - Path to Half-Life 2: DeathMatch SDK
HL2SDKL4D - Path to Left 4 Dead SDK
HL2SDKL4D2 - Path to Left 4 Dead 2 SDK
HL2SDKND - Path to Nuclear Dawn SDK
HL2SDKOB - Path to Orange Box SDK
HL2SDKTF2 - Path to Team Fortress 2 SDK

Windows only:
HL2SDK-BGT - Path to Bloody Good Time SDK
HL2SDK-DARKM - Path to Dark Messiah SDK
HL2SDK-EYE - Path to E.Y.E. Divine Cybermancy SDK
HL2SDK-SWARM - Path to Alien Swarm SDK

Note: The files included in the sample extension assume that your extension files live directly in the sample's directory.  If this is not the case, several locations in AMBuilder and PackageScript will need to be updated.

1. Open AMBuilder.  Near the bottom is an array named binary.sources.
   Basically, you'll want to add lines to this array for each .cpp file in your project.

   Also, change sampleext to the name of your extension
   i.e. name = 'readgamesounds.ext.' + sdk.ext

2. Open AMBuildScript.

   If you're not using source control versioning, delete or comment out the section that starts with SM.generated_headers =

3. If you're using source control versioning, open buildbot/Versioning.

By default, this takes the build number from Mercurial using the hg command-line program.
If you use git, comment out the line mentioning generate_headers.py and uncomment the line that mentions generate_headers_git.py.

4. Edit product.version to have the extension's version number in it.

4. Edit version.rc to have your extension's copyright information in it.  This, along with version.h, are used to populate metadata for the Windows DLL file.

6. Edit version.h to have your extension's version and binary name in it.

7. Edit buildbot/PackageScript.

   Near the top, there is a list of folders.  Add any folders you need created to this list using the format provided.

   Near the bottom is a section of CopyFiles entries that are commented out. The first argument is the source location, the second is the target location
   where the files will be in the actual distribution.  The third argument is an array of filenames.

8. If you are building an extension that only works on specific games:
   Edit configure.py.

   Next to the text '--sdks' is the text default='all'.  Change "all" to a comma separated list of engines you want to support from this list:
   ep1, ob, css, hl2dm, dods, tf2, l4d, nd, l4d2, darkm, swarm, bgt, eye, csgo, portal2

NOTE FOR WINDOWS: This should be run from a Visual Studio Command Prompt or otherwise have the Visual C++ compiler in your path.

NOTE FOR LINUX: Some versions of Linux do not ship urllib.request with Python 2.x.  If necessary, use Python 3.x.

Once everything is set up in the files, to actually run the compiler:

mkdir build
cd build
python ../configure.py
ambuild

To only build for specific games:

python ../configure.py --sdks hl2dm,dods,css,tf2
ambuild

To build a release version, use this (or combine it with the --sdks line above):
python ../configure.py --enable-optimize
ambuild

Lastly, go to the package directory and create a compressed version of the files there and upload them somewhere.
